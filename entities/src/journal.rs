//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "journal")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text", unique)]
    pub name: String,
    #[sea_orm(column_type = "Text", unique)]
    pub slug: String,
    #[sea_orm(column_type = "Text")]
    pub start_date: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub end_date: Option<String>,
    pub cover_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::file::Entity",
        from = "Column::CoverId",
        to = "super::file::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    File,
    #[sea_orm(has_many = "super::journal_comment::Entity")]
    JournalComment,
    #[sea_orm(has_many = "super::journal_entry::Entity")]
    JournalEntry,
}

impl Related<super::file::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::File.def()
    }
}

impl Related<super::journal_comment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::JournalComment.def()
    }
}

impl Related<super::journal_entry::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::JournalEntry.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
