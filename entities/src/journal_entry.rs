//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize)]
#[sea_orm(table_name = "journal_entry")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub journal_id: i32,
    pub title: String,
    pub text: String,
    pub address: Option<String>,
    #[sea_orm(column_type = "Double", nullable)]
    pub lat: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub lng: Option<f64>,
    pub date_time: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::journal::Entity",
        from = "Column::JournalId",
        to = "super::journal::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Journal,
    #[sea_orm(has_many = "super::journal_entry_media::Entity")]
    JournalEntryMedia,
}

impl Related<super::journal::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Journal.def()
    }
}

impl Related<super::journal_entry_media::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::JournalEntryMedia.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
