//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "journal_entry_media")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub journal_entry_id: i32,
    pub order: i32,
    pub caption: String,
    // KEEP ME
    pub media_type: MediaType,
    pub width: i32,
    pub height: i32,
    pub file_id: i32,
    pub thumbnail_width: i32,
    pub thumbnail_height: i32,
    pub thumbnail_file_id: i32,
}

// KEEP ME
// SYNC
#[derive(Debug, Clone, Copy, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[serde(rename_all = "lowercase")]
#[sea_orm(rs_type = "String", db_type = "String(StringLen::None)")]
pub enum MediaType {
    #[sea_orm(string_value = "image")]
    Image,
    #[sea_orm(string_value = "video")]
    Video,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::file::Entity",
        from = "Column::ThumbnailFileId",
        to = "super::file::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    File2,
    #[sea_orm(
        belongs_to = "super::file::Entity",
        from = "Column::FileId",
        to = "super::file::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    File1,
    #[sea_orm(
        belongs_to = "super::journal_entry::Entity",
        from = "Column::JournalEntryId",
        to = "super::journal_entry::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    JournalEntry,
}

impl Related<super::journal_entry::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::JournalEntry.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
